class Matrix{static Create(t){var r=new Array(t||0),e=t;if(arguments.length>1)for(var i=Array.prototype.slice.call(arguments,1);e--;)r[t-1-e]=this.Create.apply(this,i);return r}static Clone(t){var r,e;if(Array.isArray(t)){for(e=t.slice(0),r=0;r<e.length;r++)e[r]=this.Clone(e[r]);return e}if("object"==typeof t)throw"Cannot clone array containing an object!";return t}static MemCopy(t,r,e,i,s){for(var a=0;a<s;a++)t[r+a]=e[i+a]}static Copy2D(t,r,e,i){if(i>=0&i<r.length)for(var s=0;s<t.length;s++)this.MemCopy(t[s],0,r[i+s],e,t[0].length)}static Copy2DOffset(t,r,e,i){if(i>=0&i<t.length&r.length>0)for(var s=0;s<r.length;s++)this.MemCopy(t[i+s],e,r[s],0,r[0].length)}static Transpose(t){var r=t.length,e=t[0].length;if(r>1&&e>1){for(var i=this.Create(e,r),s=0;s<r;s++)for(var a=0;a<e;a++)i[a][s]=t[s][a];return i}if(r>1&&1==e){for(i=this.Create(1,r),s=0;s<r;s++)i[s]=t[s][0];return[i]}if(e>1&&1==r){for(i=this.Create(e,1),a=0;a<e;a++)i[a][0]=t[0][a];return i}}static Multiply(t,r){var e=t[0].length,i=t.length,s=r[0].length;if(e==r.length){for(var a=this.Create(i,s),h=0;h<i;h++)for(var n=0;n<s;n++){a[h][n]=0;for(var l=0;l<e;l++)a[h][n]+=t[h][l]*r[l][n]}return a}}static Product(t,r){var e=t[0].length,i=t.length,s=r[0].length,a=r.length;if(e==s&&i==a){for(var h=this.Create(i,e),n=0;n<i;n++)for(var l=0;l<e;l++)h[n][l]=e>1?t[n][l]*r[n][l]:[t[n][l]*r[n][l]];return h}}static MultiplyVector(t,r){var e=t.length;if(e==r.length){for(var i=this.Create(e),s=0;s<e;s++)i[s]=t[s]*r[s];return i}}static MultiplyConstant(t,r=1){for(var e=t[0].length,i=t.length,s=this.Create(i,e),a=0;a<i;a++)for(var h=0;h<e;h++)s[a][h]=r*t[a][h];return s}static Add(t,r,e=1){var i=t[0].length,s=t.length,a=r[0].length,h=r.length;if(i==a&&s==h){for(var n=this.Create(s,i),l=0;l<s;l++)for(var o=0;o<i;o++)n[l][o]=t[l][o]+e*r[l][o];return n}}static AddConstant(t,r=0){for(var e=t[0].length,i=t.length,s=this.Create(i,e),a=0;a<i;a++)for(var h=0;h<e;h++)s[a][h]=t[a][h]+r;return s}static Sum(t){for(var r=t[0].length,e=t.length,i=0,s=0;s<e;s++)for(var a=0;a<r;a++)i+=t[s][a];return i}static SquareSum(t){for(var r=t[0].length,e=t.length,i=0,s=0;s<e;s++)for(var a=0;a<r;a++)i+=t[s][a]*t[s][a];return i}static Mean(t,r){if(1===r){for(var e=this.Create(t[0].length),i=0;i<t[0].length;i++){for(var s=0,a=0;a<t.length;a++)s+=t[a][i];e[i]=s/t.length}return e}for(e=this.Create(t.length),a=0;a<t.length;a++){for(s=0,i=0;i<t[0].length;i++)s+=t[a][i];e[a]=s/t[0].length}return e}static Sigmoid(t){return 1/(1+Math.exp(-t))}static Diff(t,r){var e=t[0].length,i=t.length,s=r[0].length,a=r.length;if(e==s&&i==a){for(var h=this.Create(i,e),n=0;n<i;n++)for(var l=0;l<e;l++)h[n][l]=t[n][l]-r[n][l];return h}}static Sigm(t){for(var r=t[0].length,e=t.length,i=this.Create(e,r),s=0;s<e;s++)for(var a=0;a<r;a++)i[s][a]=this.Sigmoid(t[s][a]);return i}static DSigm(t){for(var r=t[0].length,e=t.length,i=this.Create(e,r),s=0;s<e;s++)for(var a=0;a<r;a++){var h=this.Sigmoid(t[s][a]);i[s][a]=h*(1-h)}return i}static CBind(t,r){var e=t[0].length,i=t.length,s=r[0].length;if(i==r.length){var a=e+s,h=i,n=this.Create(h,a);return this.Copy2DOffset(n,t,0,0),this.Copy2DOffset(n,r,e,0),n}}static Flip(t,r){for(var e=t.length,i=t[0].length,s=t[0][0].length,a=this.Create(e,i,s),h=0;h<e;h++)for(var n=0;n<i;n++)for(var l=0;l<s;l++)switch(r){case 0:a[h][n][l]=t[h][n][s-l-1];break;case 1:a[h][n][l]=t[h][i-n-1][l];break;case 2:a[h][n][l]=t[e-h-1][n][l];break;default:a[h][n][l]=t[h][n][s-l-1]}return a}static Flip2D(t,r){for(var e=t.length,i=t[0].length,s=this.Create(e,i),a=0;a<e;a++)for(var h=0;h<i;h++)switch(r){case 0:s[a][h]=t[a][i-h-1];break;case 1:s[a][h]=t[e-a-1][h];break;default:s[a][h]=t[a][i-h-1]}return s}static FlipAll(t){for(var r=t.length,e=t[0].length,i=t[0][0].length,s=this.Create(r,e,i),a=this.Clone(t),h=0;h<3;h++)s=this.Flip(a,h),a=this.Clone(s);return s}static Rotate180(t){for(var r=this.Create(t.length,t[0].length),e=this.Clone(t),i=0;i<2;i++)r=this.Flip2D(e,i),e=this.Clone(r);return r}static Expand(t,r,e){for(var i=t[0].length*r,s=t.length*e,a=this.Create(s,i),h=0;h<t.length;h++)for(var n=0;n<t[0].length;n++)for(var l=0;l<e;l++)for(var o=0;o<r;o++)a[h*e+l][n*r+o]=t[h][n];return a}static Vector(t){for(var r=this.Transpose(t),e=this.Create(t.length*t[0].length),i=0,s=0;s<r.length;s++)for(var a=0;a<r[0].length;a++)e[i]=r[s][a],i++;return e}static Column(t){for(var r=this.Create(t.length,1),e=0;e<t.length;e++)r[e][0]=t[e];return r}static RowSums(t){for(var r=this.Create(t.length,1),e=0;e<t.length;e++){r[e][0]=0;for(var i=0;i<t[0].length;i++)r[e][0]+=t[e][i]}return r}static ColSums(t){for(var r=this.Create(1,t[0].length),e=0;e<t[0].length;e++){r[0][e]=0;for(var i=0;i<t.length;i++)r[0][e]+=t[i][e]}return r}static Diag(t){if(t>0){for(var r=this.Create(t,t),e=0;e<t;e++)for(var i=0;i<t;i++)r[e][i]=i==e?1:0;return r}}static Sqrt(t){for(var r=t[0].length,e=t.length,i=this.Create(e,r),s=0;s<e;s++)for(var a=0;a<r;a++)i[s][a]=Math.sqrt(t[s][a]);return i}static Pow(t,r){for(var e=t[0].length,i=t.length,s=this.Create(i,e),a=0;a<i;a++)for(var h=0;h<e;h++)s[a][h]=Math.pow(t[a][h],r);return s}static Powers(t,r){for(var e=r[0].length,i=r.length,s=this.Create(i,e),a=0;a<i;a++)for(var h=0;h<e;h++)s[a][h]=Math.pow(t,r[a][h]);return s}static SetVector(t,r=0){for(var e=0;e<t.length;e++)t[e]=r}static Set(t,r=0){for(var e=t[0].length,i=t.length,s=0;s<i;s++)for(var a=0;a<e;a++)t[s][a]=r}static Normalize(t){for(var r=t[0].length,e=t.length,i=this.Create(e,r),s=this.Create(r),a=this.Create(r),h=0;h<r;h++)s[h]=Number.MIN_VALUE,a[h]=Number.MAX_VALUE;for(var n=0;n<e;n++)for(h=0;h<r;h++)s[h]=Math.max(t[n][h],s[h]),a[h]=Math.min(t[n][h],a[h]);for(n=0;n<e;n++)for(h=0;h<r;h++){var l=s[h]-a[h];i[n][h]=(t[n][h]-a[h])/l}return{result:i,min:a,max:s}}static ApplyNormalization(t,r,e){for(var i=t[0].length,s=t.length,a=this.Create(s,i),h=0;h<s;h++)for(var n=0;n<i;n++){var l=r[n]-e[n];a[h][n]=(t[h][n]-e[n])/l}return a}}class NeuralNetworkOptions{constructor(t,r,e,i,s,a,h,n=!1){this.Alpha=t,this.Epochs=r,this.Inputs=i,this.Items=s,this.Categories=e,this.Tolerance=a,this.HiddenLayers=h<1||null==h?1:h,this.UseL2=n}}class HiddenLayer{constructor(t,r){this.Inputs=t,this.Outputs=r}}class DeepNeuralNetwork{constructor(){this.Layers=[],this.Weights=[],this.Deltas=[],this.Y=[],this.Y_true=[],this.X=[],this.Z=[],this.Activations=[],this.D=[],this.Cost=0,this.L2=0,this.Iterations=0,this.Max=0,this.Min=0}Forward(t){var r=Matrix.Create(t.length,1);Matrix.Set(r,1);for(var e=this.Weights.length-1,i=0;i<this.Weights.length;i++){var s=0==i?Matrix.CBind(r,t):Matrix.CBind(r,this.Activations[i-1]),a=Matrix.Transpose(this.Weights[i]),h=Matrix.Multiply(s,a);this.X[i]=s,this.Z[i]=h,i!=e?this.Activations[i]=Matrix.Sigm(h):this.Y=Matrix.Sigm(h)}}BackPropagation(t){var r=this.Weights.length-1;this.D[0]=Matrix.Diff(this.Y,this.Y_true);for(var e=1,i=r-1;i>=0;i--){var s=e-1,a=Matrix.Create(this.Weights[i+1].length,this.Weights[i+1][0].length-1),h=Matrix.DSigm(this.Z[i]);Matrix.Copy2D(a,this.Weights[i+1],1,0),this.D[e]=Matrix.Multiply(this.D[s],a),this.D[e]=Matrix.Product(this.D[e],h),e++}for(i=0;i<this.Weights.length;i++){var n=Matrix.Transpose(this.D[this.Weights.length-i-1]);this.Deltas[i]=Matrix.Multiply(n,this.X[i]),this.Deltas[i]=Matrix.MultiplyConstant(this.Deltas[i],1/t.length)}this.Cost=0,this.L2=0;for(var l=0;l<this.Y_true.length;l++)for(var o=0;o<this.Y_true[0].length;o++)this.L2+=this.D[0][l][o]*this.D[0][l][o]*.5,this.Cost+=-this.Y_true[l][o]*Math.log(this.Y[l][o])-(1-this.Y_true[l][o])*Math.log(1-this.Y[l][o]);this.Cost/=t.length,this.L2/=t.length}ApplyGradients(t){for(var r=0;r<this.Weights.length;r++)this.Weights[r]=Matrix.Add(this.Weights[r],this.Deltas[r],-t.Alpha)}Rand(t,r){for(var e=Matrix.Create(r,t),i=0;i<r;i++)for(var s=0;s<t;s++)e[i][s]=2*(Math.random()-.5);return e}Labels(t,r){for(var e=Matrix.Create(r.Items,r.Categories),i=Matrix.Diag(r.Categories),s=0;s<r.Items;s++)if(r.Categories>1)for(var a=0;a<r.Categories;a++)e[s][a]=i[Math.abs(parseInt(t[s]))-1][a];else e[s]=t[s];return e}Predict(t,r){this.Forward(t);for(var e=Matrix.Create(t.length),i=0;i<t.length;i++)if(r.Categories>1){for(var s=Number.MIN_VALUE,a=0;a<r.Categories;a++){var h=this.Y[i][a];h>s&&(s=h)}e[i]=[s]}else e[i]=this.Y[i];return e}Classify(t,r,e=.5){this.Forward(t);for(var i=Matrix.Create(t.length),s=0;s<t.length;s++)if(r.Categories>1){for(var a=Number.MIN_VALUE,h=0,n=0;n<r.Categories;n++){var l=this.Y[s][n];l>a&&(a=l,h=n)}i[s]=[h+1]}else i[s]=this.Y[s]>e?[1]:[0];return i}SetupLabels(t,r){this.Y_true=this.Labels(t,r)}SetupHiddenLayers(t,r,e){if(e.length>0){this.Layers=[],this.Layers.push(new HiddenLayer(t,e[0]));for(var i=1;i<e.length;i++)this.Layers.push(new HiddenLayer(e[i-1],e[i]));this.Layers.push(new HiddenLayer(e[e.length-1],r))}}Setup(t,r,e=!0){if(e){if(null!=this.Activations&&this.Activations.length>0)for(var i=0;i<this.Activations.length;i++)this.Activations[i]=[];if(null!=this.D&&this.D.length>0)for(i=0;i<this.D.length;i++)this.D[i]=[];if(null!=this.Deltas&&this.Deltas.length>0)for(i=0;i<this.Deltas.length;i++)this.Deltas[i]=[];if(null!=this.X&&this.X.length>0)for(i=0;i<this.X.length;i++)this.X[i]=[];if(null!=this.Z&&this.Z.length>0)for(i=0;i<this.Z.length;i++)this.Z[i]=[];if(null!=this.Weights&&this.Weights.length>0)for(i=0;i<this.Weights.length;i++)this.Weights[i]=[];if(this.Layers.length>0){this.Weights=Matrix.Create(this.Layers.length);for(i=0;i<this.Layers.length;i++)this.Weights[i]=Matrix.Create(this.Layers[i].Outputs,this.Layers[i].Inputs+1)}else{this.Weights=Matrix.Create(r.HiddenLayers+1),this.Weights[0]=Matrix.Create(r.Inputs+1,r.Nodes);for(i=1;i<r.HiddenLayers;i++)this.Weights[i]=Matrix.Create(r.Nodes+1,r.Nodes);this.Weights[r.HiddenLayers]=Matrix.Create(r.Categories,r.Nodes+1)}}if(this.Activations=Matrix.Create(r.HiddenLayers),this.Deltas=Matrix.Create(r.HiddenLayers+1),this.X=Matrix.Create(r.HiddenLayers+1),this.D=Matrix.Create(r.HiddenLayers+1),this.Z=Matrix.Create(r.HiddenLayers+1),this.SetupLabels(t,r),e&&null!=this.Weights)for(i=0;i<r.HiddenLayers+1;i++)this.Weights[i]=this.Rand(this.Weights[i][0].length,this.Weights[i].length);this.Cost=1,this.L2=1,this.Iterations=0}Step(t,r){this.Forward(t),this.BackPropagation(t);var e=isNaN(r.UseL2?this.L2:this.Cost)||(r.UseL2?this.L2:this.Cost)<r.Tolerance;return e||this.ApplyGradients(r),this.Iterations++,e||this.Iterations>=r.Epochs}Train(t,r,e){for(this.Setup(r,e);!this.Step(t,e););}Normalize(t){var r=Matrix.Normalize(t);return this.Min=r.min,this.Max=r.max,r.result}ApplyNormalization(t){return Matrix.ApplyNormalization(t,this.Max,this.Min)}}